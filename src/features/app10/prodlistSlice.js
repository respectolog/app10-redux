import { createSlice } from "@reduxjs/toolkit";
import data from "./data.json";

const todata = data.data;
const list = todata.cheques;

var newmassiv = list.map(function (item) {
  return {
    dataReg: item.dateReg,
    num: item.num,
    kioskName: item.kioskName,
    chequeType: item.chequeType,
    pays: item.pays,
    sum: item.sum,
    positions: item.positions,
  };
});

const initialState = {
  list: newmassiv,
};

export const prodlistSlice = createSlice({
  name: "prodlist",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addString: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes

      state.list.push(action.payload);
    },
    deleteString: (state, action) => {
      for (let i = 0; i < state.list.length; i++) {
        if (state.list[i].num === action.payload) {
          var x = i;
        }
      }
      state.list.splice(x, 1);
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { addString, deleteString } = prodlistSlice.actions;

export const selectMassive = (state) => state.prodlist.list;

export default prodlistSlice.reducer;
